version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:17-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: infra_switchs_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d infra_switchs_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Criar tabela automaticamente
    command: >
      bash -c "
        docker-entrypoint.sh postgres &
        sleep 10 &&
        PGPASSWORD=123456 psql -h localhost -U postgres -d infra_switchs_db -c '
          CREATE TABLE IF NOT EXISTS building_info_tb (
            id SERIAL PRIMARY KEY,
            qtd_sw INTEGER,
            build_name VARCHAR(200),
            build_number INTEGER,
            lnglat VARCHAR(50),
            switchs TEXT
          );'
        wait
      "

  # Frontend React (servido estaticamente)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    container_name: react_frontend
    ports:
      - "80:80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Express (Node.js)
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.api
    container_name: express_api
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PORT=5433
      - DATABASE_URL=postgresql://postgres:123456@postgres:5432/infra_switchs_db
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=infra_switchs_db
      - DB_USER=postgres
      - DB_PASSWORD=123456
    ports:
      - "5433:5433"
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flask API (Python)
  flask-api:
    build:
      context: ./flask-api
      dockerfile: Dockerfile.flask
    container_name: flask_api
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - FLASK_ENV=production
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      - DATABASE_URL=postgresql://postgres:123456@postgres:5432/infra_switchs_db
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=infra_switchs_db
      - DB_USER=postgres
      - DB_PASSWORD=123456
    ports:
      - "5000:5000"
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  default:
    driver: bridge